Strings Review

1. Know the difference between the empty string ("") and a null String.

String str;    //null
String a = ""; //empty

a.length()  --> 0
str.length() --> error: null pointer exception

this is why you do this:

if (answer.equals("y"))  //not secure
if ("y".equals(answer))  //secure


2. Understand how the indexing system works for identifying specific characters and substrings in a given String

3. Know that you cannot use == to compare whether two strings are the same sequence of characters.

4. Know the following String methods and what they do:

  a. str.length()
  b. str.substring(start)
  c. str.substring(start, end)
  d. str.indexOf(otherstr)
  e. str.indexOf(otherstr, start)
  f. str.lastIndexOf(otherstr)
  g. str.lastIndexOf(otherstr, start)
  h. str.equals(otherstr)
  i. str.equalsIgnoreCase(otherstr)
  j. str.contains(otherstr)
  k. str.toUpperCase()
  l. str.toLowerCase()

In general, the questions you will get on the unit test may directly question how these methods work, but they are also just tools for you to use to solve problems, much like Strings-2 from CodingBat.

5. Some other methods that won't be tested but can be useful

  a. str.charAt(n)
  b. str.split(separatorstr)
  c. Character.isDigit(char)
  d. Character.isLetter(char)

6. Here are the example solutions for Strings-2

public String doubleChar(String str) {
   String answerString = "";
   
   for (int i = 0; i < str.length(); i++) {
     String c = str.substring(i, i+1);
     answerString = answerString + c + c;
   }
   return answerString;
}


public int countHi(String str) {

  int count = 0;

  for (int i = 0; i <= str.length()-2; i++) {
    String s = str.substring(i, i+2);
    if (s.equals("hi")) {
      count ++;
    }
  }
  return count;
}



public boolean catDog(String str) {
  
  int dogCount = 0;
  int catCount = 0;

  for (int i = 0; i < str.length()-2; i++)
  {
    if (str.substring(i,i+3).equals("dog"))
      dogCount++;
    else if (str.substring(i,i+3).equals("cat"))
      catCount++;
  }
  return (catCount == dogCount);
}


public int countCode(String str) {
  int i = 0;
  int count = 0;
  while (i <= str.length() - 4) {
    if (str.charAt(i)   == 'c' &&
        str.charAt(i+1) == 'o' &&
        str.charAt(i+3) == 'e')
    {
      count++;
    }  
    i++;
  }
  
  return count;
}



public boolean endOther(String a, String b) {
  a = a.toLowerCase();
  b = b.toLowerCase();
  
  if (a.length() > b.length()) {
    String aEnd = a.substring(a.length() - b.length());
    return aEnd.equals(b);
  } else if (b.length() > a.length()) {
    String bEnd = b.substring(b.length() - a.length());
    return bEnd.equals(a);
  } else {
    return a.equals(b);
  }
}



public boolean xyzThere(String str) {
  
  if (str.length() < 3) return false;
  if (str.length() == 3) return str.equals("xyz");
  if (str.substring(0,3).equals("xyz")) return true;
  
  int i = 1;
  while (i < str.length()-2) {
    String chunk  = str.substring(i,i+3);
    String before = str.substring(i-1,i);
    if (i > 0  && chunk.equals("xyz") && !before.equals(".")) return true; 
    i++;
  }
  
  return false;
}



public boolean bobThere(String str) {
  int i = 0;
  while (i <= str.length()-3) {
    if (str.charAt(i) == 'b' && str.charAt(i+2) == 'b')
      return true;
    i++;
  }
  return false;
}



public boolean xyBalance(String str) {
  int lastX = str.lastIndexOf("x");
  int lastY = str.lastIndexOf("y");
  
  return (lastY > lastX || lastY == lastX);
}



public String mixString(String a, String b) {
  int maxlen = Math.max(a.length(), b.length());
  String ans = "";
  
  int i = 0;
  while (i < maxlen) {
    String pieceOfA = "";
    String pieceOfB = "";
    if (i < a.length()) pieceOfA = a.substring(i,i+1);
    if (i < b.length()) pieceOfB = b.substring(i,i+1);
    ans += pieceOfA + pieceOfB;
    i++;
  }
  
  return ans;
}



public String repeatEnd(String str, int n) {
  String end = str.substring(str.length()-n);
  String newString = "";
  
  for (int i = 0; i < n; i++) {
    newString += end;
  }
  
  return newString;
}



public String repeatFront(String str, int n) {
  String ans = "";
  
  for (int i = n; i > 0; i--) {
    ans += str.substring(0,i);
  }
  
  return ans;
}



public String repeatSeparator(String word, String sep, int count) {
  String ans = "";
  for (int i = 0; i < count; i++) {
    if (i == count-1) ans += word;
    else ans += word + sep;
  }
  return ans;
}



public boolean prefixAgain(String str, int n) {
  int i = n;
  int s = str.length();
  String prefix = str.substring(0, n);
  
  while (i <= s-n) {
    String chunk = str.substring(i, i+n);
    if (chunk.equals(prefix)) {
      return true;
    }
    i++;
  }

  return false;
}



public boolean xyzMiddle(String str) {
  String xyz = "xyz";
  int len = str.length();
  int middle = len / 2;

  if (len < 3)
    return false;
  if (len % 2 != 0) {
    if (xyz.equals(str.substring(middle-1,middle+2))) {
      return true;
    } else {
      return false;
    }
  } else if (xyz.equals(str.substring(middle-1,middle+2)) ||
             xyz.equals(str.substring(middle-2,middle+1))) {
    return true;
  } else {
    return false; 
  }
}



public String getSandwich(String str) {
  String answer = "";
  
  int b1 = str.indexOf("bread");
  int b2 = str.lastIndexOf("bread");
  if (b1 != b2) {
    answer = str.substring(b1+5, b2);
  }
  
  return answer;
}



public boolean sameStarChar (String str) {
  if (str.length() < 3)
    return true;
  
  for (int i = 1; i < str.length() - 1; i++) {
    if (str.charAt(i) == '*') {
      char front = str.charAt(i-1);
      char back  = str.charAt(i+1);
      if (front != back)
        return false;
    }
  }
  
  return true;
}



public String oneTwo(String str) {
  String ans = "";
  
  while (str.length() >= 3) {
    String bc = str.substring(1,3);
    String a  = str.substring(0,1);
    ans += bc + a;
    str = str.substring(3);
  }
  
  return ans;
  
}



public String zipZap(String str) {
  if (str.length() < 3) return str;
  
  String ans = "";
  
  int i = 0;
  while ( i < str.length()-2) {
    String first = str.substring(i,i+1);
    String last = str.substring(i+2,i+3);
    if (first.equals("z") && last.equals("p")) {
      ans += "zp";
      i += 3;
    } else {
      ans += first;
      i++;
    }
  }
  
  if (i < str.length()) {
    return ans + str.substring(i);
  } else {
    return ans;
  }
  
}



public String starOut(String str) {
  
  String answer = "";
  
  //deal with tiny strings
  if (str.length() < 3) {
    if (str.contains("*")) {
      return "";
    } else {
      return str;
    }
  }
  
  //process larger strings
  for (int i = 0; i < str.length()-1; i++) {
    String sub = str.substring(i,i+2);
    char a = str.charAt(i);
    char b = str.charAt(i+1);
    if (!sub.contains("*")) {
      answer += a;
    } 
    else {
      if (a == '*' & b != '*') {
        i++; //skip ahead 2
      } else {
        //do nothing, will skip ahead 1 because of for loop
      }
    }
  }
  
  //deal with last character separately to avoid out of bounds
  String lastTwo = str.substring(str.length()-2);
  char lastChar = str.charAt(str.length()-1);
  if (!lastTwo.contains("*")) {
    answer += lastChar;
  }
  
  return answer;
}



public String plusOut(String str, String word) {
  String newString = "";
  int i = 0;
  int s = str.length();
  int w = word.length();
  
  while (i < s-w+1) {
    String chunk = str.substring(i, i+w);
    if (chunk.equals(word)) {
      newString += word;
      i += w;
    }
    else {
      newString += "+";
      i++;
    }
  }
  
  while (i < s) {
    newString += "+";
    i++;
  }
  
  return newString;
}



public String wordEnds(String str, String word) {
  int w = word.length();
  int s = str.length();
  String ans = "";
  
  int i = str.indexOf(word);
  
  while(i >= 0) {                          //keep going until there are no more words
    if (i > 0) ans += str.charAt(i-1);     //get character before word
    if (s > i + w) ans += str.charAt(i+w); // get character after word
    i = str.indexOf(word, i+1);            //find next word
  }
  return ans;
}



