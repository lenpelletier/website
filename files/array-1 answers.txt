public boolean firstLast6(int[] nums) {
  
  int lastIndex = nums.length - 1;
  if (nums[0] == 6 || nums[lastIndex] == 6) 
    return true;
  else 
    return false;  
}



public boolean sameFirstLast(int[] nums) {
  if (nums.length == 0) {
    return false;
  }

  if (nums[0] == nums[nums.length-1]) {
    return true;
  } else {
    return false;
  }
}



public int[] makePi() {

   int[] pi = new int[3];
    pi[0] = 3;
    pi[1] = 1;
    pi[2] = 4;
  
   return pi;
}



public boolean commonEnd(int[] a, int[] b) {
  return (a[a.length-1] == b[b.length-1] || a[0] == b[0]);
}




public int sum3(int[] nums) {
  return nums[0] + nums[1] + nums[2];
}




public int[] rotateLeft3(int[] nums) {
  int[] a;
  a = new int[3];
  a[2] = nums[0];
  a[1] = nums[2];
  a[0] = nums[1];
  return a;
}



public int[] reverse3(int[] nums) {
 
  int[] a = new int[3];
  a[0] = nums[2];
  a[1] = nums[1];
  a[2] = nums[0];
  
  return a;
}



public int[] maxEnd3(int[] nums) {
  int[] a = new int[3];
  int biggest;
  
  if (nums[0] > nums[2]) {
    biggest = nums[0];
  } else {
    biggest = nums[2];
  }
  
  a[0] = biggest;
  a[1] = biggest;
  a[2] = biggest;

  return a;
}



public int sum2(int[] nums) {
  if (nums.length == 0)
    return 0;
  else if (nums.length == 1)
    return nums[0];
  else
    return nums[0] + nums[1];
}



public int[] middleWay(int[] a, int[] b) {
  int[] c = new int[2];
  c[0] = a[1];
  c[1] = b[1];
  return c;
}



public int[] makeEnds(int[] nums) {
  int[] a = new int[2];
 
  a[0] = nums[0];
  a[1] = nums[nums.length-1];
  
  return a; 
}



public boolean has23(int[] n) {
  return n[0] == 2 || n[1] == 2 || n[0] == 3 || n[1] == 3;
}



public boolean no23(int[] nums)  {
  return !(nums[0] == 2 || nums[0] == 3 || nums[1] == 2 || nums[1] == 3);
}



public int[] makeLast(int[] nums) {
   int[] i = new int[nums.length*2];
   i[i.length-1] = nums[nums.length-1];
   return i;
}



public boolean double23(int[] n) {
  if (n.length < 2)
    return false;
  else
    return (n[0] == n[1] && n[0] == 2) || (n[0] == n[1] && n[0] == 3);
}



public int[] fix23(int[] nums) {
   if (nums[0] == 2 && nums[1] == 3)
      nums[1] = 0;
   if (nums[1] == 2 && nums[2] == 3)
      nums[2] = 0;
   return nums;
}



public int start1(int[] a, int[] b) {
  int count = 0;
  if (a.length > 0 && a[0] == 1)
    count++;
  if (b.length > 0 && b[0] == 1)
    count++;
  return count;
}



public int[] biggerTwo(int[] a, int[] b) {
  int sumA = a[0] + a[1];
  int sumB = b[0] + b[1];
  if (sumA >= sumB)
     return a;
  else
     return b;
}



public int[] makeMiddle(int[] nums) {
   int[] middle = new int[2];
   middle[0] = nums[nums.length/2 - 1];
   middle[1] = nums[nums.length/2];
   return middle;
   
}



public int[] plusTwo(int[] a, int[] b) {
  int[] c = new int[4];
  c[0] = a[0];
  c[1] = a[1];
  c[2] = b[0];
  c[3] = b[1];
  return c;
}



public int[] swapEnds(int[] nums) {
  int temp = 0;
  temp = nums[0];
  nums[0] = nums[nums.length - 1];
  nums[nums.length - 1] = temp;
  return nums;
}



public int[] midThree(int[] nums) {
  int[] a = new int[3];
  a[0] = nums[nums.length/2 - 1];
  a[1] = nums[nums.length/2];
  a[2] = nums[nums.length/2 + 1];
  return a;
}



public int maxTriple(int[] a) {
  if (a.length == 1)
    return a[0];
  else if (a[0] >= a[a.length/2] && a[0] >= a[a.length - 1])
    return a[0];
  else if (a[a.length/2] >= a[0] && a[a.length/2] >= a[a.length - 1])
    return a[a.length/2];
  else
    return a[a.length - 1];
}



public int[] frontPiece(int[] nums) {
  int[] a = new int[2];
  if (nums.length < 2)
    return nums;
  else {
    a[0] = nums[0];
    a[1] = nums[1];
    return a;
  }
}



public boolean unlucky1(int[] nums) {
  return ((nums.length > 1 && nums[0] == 1 && nums[1] ==  3) || (nums.length > 2 && nums[1] == 1 && nums[2] ==  3) || (nums.length > 1 && nums[nums.length - 2] == 1 && nums[nums.length - 1] == 3));
}



public int[] make2(int[] a, int[] b) {
  int[] c = new int[2];
  if (a.length == 0) {
    c[0] = b[0];
    c[1] = b[1];
  }
  else if (a.length == 1) {
    c[0] = a[0];
    c[1] = b[0];
  }
  else {
    c[0] = a[0];
    c[1] = a[1];
  }
  return c;
}



public int[] front11(int[] a, int[] b) 
{
  if (a.length == 0 && b.length == 0)
  {
    int[] c = new int[0];
    return c;
  }
  else if (a.length == 0)
  {
    int[] c = new int[1];
    c[0] = b[0];
    return c;
  }
  else if (b.length == 0)
  {
    int[] c = new int[1];
    c[0] = a[0];
    return c;
  }    
  else
  {
    int[] c = new int[2];
    c[0] = a[0];
    c[1] = b[0];
    return c;
  }
}



